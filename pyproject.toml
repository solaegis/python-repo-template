[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{PACKAGE_NAME}}"
dynamic = ["version"]
description = "{{PACKAGE_DESCRIPTION}}"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
authors = [
    { name = "{{AUTHOR_NAME}}", email = "{{AUTHOR_EMAIL}}" },
]
keywords = ["internal", "tooling"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Production dependencies - keep minimal
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0", 
    "structlog>=23.0.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0", 
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "types-requests",
]

# Production monitoring/observability
monitoring = [
    "sentry-sdk[logging]>=1.32.0",
    "prometheus-client>=0.17.0",
]

# Container/deployment deps
deploy = [
    "gunicorn>=21.0.0", 
    "uvicorn[standard]>=0.23.0",
]

[project.urls]
Documentation = "https://github.com/{{GITHUB_ORG}}/{{PACKAGE_NAME}}#readme"
Issues = "https://github.com/{{GITHUB_ORG}}/{{PACKAGE_NAME}}/issues"
Source = "https://github.com/{{GITHUB_ORG}}/{{PACKAGE_NAME}}"

[project.scripts]
"{{PACKAGE_NAME}}" = "{{PACKAGE_NAME}}.cli:main"

[tool.hatch.version]
path = "src/{{PACKAGE_NAME}}/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/{{PACKAGE_NAME}}"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docker", 
    "/scripts",
    "/tests",
]

# Tool configurations
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov={{PACKAGE_NAME}}",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.ruff]
target-version = "py38"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
]
ignore = [
    "E501",  # line too long - handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "ARG001", # unused function arguments
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101", "SIM"]

[tool.ruff.lint.isort]
known-first-party = ["{{PACKAGE_NAME}}"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.8" 
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
